version: "3.7"

networks:
  simulation:
      driver: bridge
      ipam:
          driver: default
          config:
              - subnet: "10.1.0.0/22"

services:

  foundry:
    image: ghcr.io/foundry-rs/foundry:nightly-9b73e06e1fe376738b92ae081107620291d50188
    labels:
      com.centurylinklabs.watchtower.enable: '${WATCHTOWER_ENABLED:-false}'
    ports:
      - 127.0.0.1:8545:8545
    command: >
      "anvil 
      --port=8545
      --host=0.0.0.0 
      --chain-id=1337 
      --block-time=12 
      --accounts=1
      --allow-origin=*
      --silent"
    networks:
      - simulation

  bootstrap:
    image: ${NWAKU_IMAGE:-wakuorg/nwaku:latest}
    restart: on-failure
    labels:
      com.centurylinklabs.watchtower.enable: '${WATCHTOWER_ENABLED:-false}'
    #Â TODO: expose some ports to inject traffic
    ports:
      - 127.0.0.1:60000:60000
      - 127.0.0.1:8008:8008
      - 127.0.0.1:9000:9000
      - 127.0.0.1:8645:8645
    entrypoint: sh
    command:
    - '/opt/run_bootstrap.sh'
    volumes:
      - ./run_bootstrap.sh:/opt/run_bootstrap.sh:Z
    networks:
      - simulation
  
  nwaku:
    image: ${NWAKU_IMAGE:-wakuorg/nwaku:latest}
    restart: on-failure
    labels:
      com.centurylinklabs.watchtower.enable: '${WATCHTOWER_ENABLED:-false}'
    deploy:
      replicas: ${NUM_NWAKU_NODES:-5}
    entrypoint: sh
    environment:
      - RPC_URL=http://foundry:8545
      - PRIVATE_KEY=0xac0974bec39a17e36ba4a6b4d238ff944bacb478cbed5efcae784d7bf4f2ff80
      - RLN_CONTRACT_ADDRESS=0x9fE46736679d2D9a65F0992F2272dE9f3c7fa6e0
      - RLN_CREDENTIAL_PATH=/keystore/keystore.json
      - RLN_CREDENTIAL_PASSWORD=passw123
    command:
      - '/opt/run_nwaku.sh'
    volumes:
      - ./run_nwaku.sh:/opt/run_nwaku.sh:Z
      - ./keystore:/keystore/:Z
    depends_on:
      - bootstrap
      - foundry
    networks:
      - simulation

  gowaku:
    image: ${GOWAKU_IMAGE:-wakuorg/go-waku:latest}
    restart: on-failure
    labels:
      com.centurylinklabs.watchtower.enable: '${WATCHTOWER_ENABLED:-false}'
    deploy:
      replicas: ${NUM_GOWAKU_NODES:-0}
    entrypoint: sh
    command:
      - '/opt/run_gowaku.sh'
    volumes:
      - ./run_gowaku.sh:/opt/run_gowaku.sh:Z
    depends_on:
      - bootstrap

  rest-traffic:
    build:
      context: .
      dockerfile: Dockerfile.rest-traffic
    command: >
      python /opt/traffic.py
      --multiple-nodes=http://waku-simulator_nwaku_[1..${NUM_NWAKU_NODES:-5}]:8645
      --msg-size-kbytes=${MSG_SIZE_KBYTES:-10}
      --delay-seconds=${TRAFFIC_DELAY_SECONDS:-15}
    volumes:
      - ./traffic.py:/opt/traffic.py:Z
    networks:
      - simulation
    depends_on:
      - nwaku

  prometheus:
    image: prom/prometheus:latest
    volumes:
      - ./monitoring/prometheus-config.yml:/etc/prometheus/prometheus.yml:z
    command:
      - --config.file=/etc/prometheus/prometheus.yml
      - --storage.tsdb.retention.time=7d
    ports:
      - 127.0.0.1:9090:9090
    restart: on-failure
    networks:
      - simulation

  grafana:
    image: grafana/grafana:latest
    env_file:
      - ./monitoring/configuration/grafana-plugins.env
    volumes:
      - ./monitoring/configuration/grafana.ini:/etc/grafana/grafana.ini:z
      - ./monitoring/configuration/dashboards.yaml:/etc/grafana/provisioning/dashboards/dashboards.yaml:z
      - ./monitoring/configuration/datasources.yaml:/etc/grafana/provisioning/datasources/datasources.yaml:z
      - ./monitoring/configuration/dashboards:/var/lib/grafana/dashboards/:z
      - ./monitoring/configuration/customizations/custom-logo.svg:/usr/share/grafana/public/img/grafana_icon.svg:z
      - ./monitoring/configuration/customizations/custom-logo.svg:/usr/share/grafana/public/img/grafana_typelogo.svg:z
      - ./monitoring/configuration/customizations/custom-logo.png:/usr/share/grafana/public/img/fav32.png:z
    ports:
      #- 127.0.0.1:3000:3000
      # open port to access the dashboard
      - 3000:3000
    restart: on-failure
    depends_on:
      - prometheus
    networks:
      - simulation

  cadvisor:
    image: gcr.io/cadvisor/cadvisor:latest
    container_name: cadvisor
    #ports:
    #  - 8080:8080
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:rw
      - /sys:/sys:ro
      - /var/lib/docker/:/var/lib/docker:ro
    depends_on:
      - redis
    networks:
      - simulation

  redis:
    image: redis:latest
    container_name: redis
    #ports:
    #  - 6379:6379
    networks:
      - simulation

  api:
    image: web3labs/epirus-free-api:latest
    ports:
      - 127.0.0.1:8090:8090
    environment:
      - NODE_ENDPOINT=http://foundry:8545
      - MONGO_CLIENT_URI=mongodb://mongodb:27017
      - REINDEX_ENDPOINT=http://ingestion/reindex/
      - MONGO_DB_NAME=epirus
      - MONGO_CREATE_INDICES=true
      - REDIS_HOST=redis
      - REDIS_PORT=6379
    depends_on:
      - redis 
      - mongodb
      - foundry
    networks:
      - simulation
  
  mongodb:
    image: mongo:5.0.8
    environment:
      - COMPOSE_HTTP_TIMEOUT=900
      - DOCKER_CLIENT_TIMEOUT=900
    entrypoint: mongod --bind_ip "0.0.0.0"
    networks:
      - simulation

  web:
    image: web3labs/epirus-free-web:latest
    ports:
      - 127.0.0.1:3001:3000
    environment:
      - API_URL=http://localhost:8090
      - WS_API_URL=ws://localhost:8090
      - DISPLAY_NETWORK_TAB=disabled
    depends_on:
      - api
    networks:
      - simulation
  
  ingestion:
    image: web3labs/epirus-free-ingestion:latest
    environment:
      - NODE_ENDPOINT=http://foundry:8545
      - MONGO_CLIENT_URI=mongodb://mongodb:27017
      - MONGO_DB_NAME=epirus
      - LIST_OF_METRICS_TO_CALCULATE_PER_MINUTE=hourly,daily,monthly,yearly
    depends_on:
      - mongodb
      - redis
      - foundry
    networks:
      - simulation

  waku-rln-contract:
    image: ubuntu
    command: tail -f /dev/null
    volumes:
      - /submodules/waku-rln-contract:/waku-rln-contract
    networks:
      - simulation